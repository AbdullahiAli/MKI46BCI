ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
V/home/wieke/git/buffer_bci/psychoPy/pythonComponent/simple_imagined_movement.psyexp
p7
sS'dataFileName'
p8
Vdata/3_simple_imagined_movement_2014_jul_28_1633
p9
sS'runtimeInfo'
p10
NsS'name'
p11
Vsimple_imagined_movement
p12
sS'dataNames'
p13
(lp14
S'key_resp_2.keys'
p15
aS'key_resp_2.rt'
p16
aS'key_resp_3.keys'
p17
aS'key_resp_3.rt'
p18
asS'autoLog'
p19
I01
sS'extraInfo'
p20
(dp21
S'date'
p22
V2014_jul_28_1633
p23
sS'frameRate'
p24
cnumpy.core.multiarray
scalar
p25
(cnumpy
dtype
p26
(S'f8'
I0
I1
tRp27
(I3
S'<'
NNNI-1
I-1
I0
tbS' \xd1B\x17\x92\xdbH@'
tRp28
sS'expName'
p29
g12
sS'session'
p30
V001
p31
sS'participant'
p32
V3
ssS'loopsUnfinished'
p33
(lp34
sS'saveWideText'
p35
I01
sS'thisEntry'
p36
(dp37
sS'version'
p38
S''
sS'_paramNamesSoFar'
p39
(lp40
S'trailText'
p41
aS'trail'
p42
aS'bodyPart'
p43
aS'instruction'
p44
asS'entries'
p45
(lp46
(dp47
g30
g31
sg16
F1.6751620769500732
sg29
g12
sg32
V3
sg22
g23
sg24
g28
sg15
S'space'
p48
sa(dp49
S'stimuli.thisN'
p50
I0
sS'trials.thisIndex'
p51
g25
(g26
(S'i8'
I0
I1
tRp52
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp53
sS'stimuli.thisIndex'
p54
g25
(g52
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp55
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p56
I0
sS'trials.thisRepN'
p57
I0
sg44
V Left Foot
p58
sg24
g28
sS'trials.thisN'
p59
I0
sg41
V Trail 1
p60
sg42
g25
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp61
sg29
g12
sS'trials.thisTrialN'
p62
I0
sS'stimuli.thisTrialN'
p63
I0
sg22
g23
sg43
Vleft_foot
p64
sa(dp65
S'stimuli.thisN'
p66
I1
sS'trials.thisIndex'
p67
g53
sS'stimuli.thisIndex'
p68
g25
(g52
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp69
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p70
I0
sS'trials.thisRepN'
p71
I0
sg44
V Right Foot
p72
sg24
g28
sS'trials.thisN'
p73
I0
sg41
g60
sg42
g61
sg29
g12
sS'trials.thisTrialN'
p74
I0
sS'stimuli.thisTrialN'
p75
I1
sg22
g23
sg43
Vright_foot
p76
sa(dp77
S'stimuli.thisN'
p78
I2
sS'trials.thisIndex'
p79
g53
sS'stimuli.thisIndex'
p80
g25
(g52
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp81
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p82
I0
sS'trials.thisRepN'
p83
I0
sg44
V Left Hand
p84
sg24
g28
sS'trials.thisN'
p85
I0
sg41
g60
sg42
g61
sg29
g12
sS'trials.thisTrialN'
p86
I0
sS'stimuli.thisTrialN'
p87
I2
sg22
g23
sg43
Vleft_hand
p88
sa(dp89
S'stimuli.thisN'
p90
I3
sS'trials.thisIndex'
p91
g53
sS'stimuli.thisIndex'
p92
g25
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp93
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p94
I0
sS'trials.thisRepN'
p95
I0
sg44
V Right Hand
p96
sg24
g28
sS'trials.thisN'
p97
I0
sg41
g60
sg42
g61
sg29
g12
sS'trials.thisTrialN'
p98
I0
sS'stimuli.thisTrialN'
p99
I3
sg22
g23
sg43
Vright_hand
p100
sa(dp101
g30
g31
sS'trials.thisIndex'
p102
g53
sg32
V3
sS'trials.thisRepN'
p103
I0
sg24
g28
sS'trials.thisN'
p104
I0
sg41
g60
sg42
g61
sg29
g12
sS'trials.thisTrialN'
p105
I0
sg22
g23
sa(dp106
S'stimuli.thisN'
p107
I0
sS'trials.thisIndex'
p108
g25
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp109
sS'stimuli.thisIndex'
p110
g25
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp111
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p112
I0
sS'trials.thisRepN'
p113
I0
sS'instruction'
p114
V Right Hand
p115
sg24
g28
sS'trials.thisN'
p116
I1
sg41
V Trail 2
p117
sg42
g25
(g52
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp118
sg29
g12
sS'trials.thisTrialN'
p119
I1
sS'stimuli.thisTrialN'
p120
I0
sg22
g23
sS'bodyPart'
p121
Vright_hand
p122
sa(dp123
S'stimuli.thisN'
p124
I1
sS'trials.thisIndex'
p125
g109
sS'stimuli.thisIndex'
p126
g25
(g52
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp127
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p128
I0
sS'trials.thisRepN'
p129
I0
sg114
V Left Foot
p130
sg24
g28
sS'trials.thisN'
p131
I1
sg41
g117
sg42
g118
sg29
g12
sS'trials.thisTrialN'
p132
I1
sS'stimuli.thisTrialN'
p133
I1
sg22
g23
sg121
Vleft_foot
p134
sa(dp135
S'stimuli.thisN'
p136
I2
sS'trials.thisIndex'
p137
g109
sS'stimuli.thisIndex'
p138
g25
(g52
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp139
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p140
I0
sS'trials.thisRepN'
p141
I0
sg114
V Left Hand
p142
sg24
g28
sS'trials.thisN'
p143
I1
sg41
g117
sg42
g118
sg29
g12
sS'trials.thisTrialN'
p144
I1
sS'stimuli.thisTrialN'
p145
I2
sg22
g23
sg121
Vleft_hand
p146
sa(dp147
S'stimuli.thisN'
p148
I3
sS'trials.thisIndex'
p149
g109
sS'stimuli.thisIndex'
p150
g25
(g52
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp151
sg32
V3
sg30
g31
sS'stimuli.thisRepN'
p152
I0
sS'trials.thisRepN'
p153
I0
sg114
V Right Foot
p154
sg24
g28
sS'trials.thisN'
p155
I1
sg41
g117
sg42
g118
sg29
g12
sS'trials.thisTrialN'
p156
I1
sS'stimuli.thisTrialN'
p157
I3
sg22
g23
sg121
Vright_foot
p158
sa(dp159
g30
g31
sS'trials.thisIndex'
p160
g109
sg32
V3
sS'trials.thisRepN'
p161
I0
sg24
g28
sS'trials.thisN'
p162
I1
sg41
g117
sg42
g118
sg29
g12
sS'trials.thisTrialN'
p163
I1
sg22
g23
sa(dp164
g30
g31
sg29
g12
sg32
V3
sg22
g23
sg17
S'space'
p165
sg24
g28
sg18
F1.4800307750701904
sa(dp166
g30
g31
sg32
V3
sS'trials_2.thisRepN'
p167
I0
sS'trials_2.thisTrialN'
p168
I0
sS'instruction'
p169
V Right Foot
p170
sg24
g28
sg29
g12
sS'trials_2.thisIndex'
p171
g25
(g52
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp172
sg22
g23
sS'bodyPart'
p173
Vright_foot
p174
sS'trials_2.thisN'
p175
I0
sa(dp176
g30
g31
sg32
V3
sS'trials_2.thisRepN'
p177
I0
sS'trials_2.thisTrialN'
p178
I1
sg169
V Left Foot
p179
sg24
g28
sg29
g12
sS'trials_2.thisIndex'
p180
g25
(g52
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp181
sg22
g23
sg173
Vleft_foot
p182
sS'trials_2.thisN'
p183
I1
sa(dp184
g30
g31
sg32
V3
sS'trials_2.thisRepN'
p185
I0
sS'trials_2.thisTrialN'
p186
I2
sg169
V Right Hand
p187
sg24
g28
sg29
g12
sS'trials_2.thisIndex'
p188
g25
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp189
sg22
g23
sg173
Vright_hand
p190
sS'trials_2.thisN'
p191
I2
sa(dp192
g30
g31
sg32
V3
sS'trials_2.thisRepN'
p193
I0
sS'trials_2.thisTrialN'
p194
I3
sg169
V Left Hand
p195
sg24
g28
sg29
g12
sS'trials_2.thisIndex'
p196
g25
(g52
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp197
sg22
g23
sg173
Vleft_hand
p198
sS'trials_2.thisN'
p199
I3
sasS'loops'
p200
(lp201
g1
(cpsychopy.data
TrialHandler
p202
g3
NtRp203
(dp204
S'origin'
p205
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p206
sS'thisTrial'
p207
(lp208
sS'_exp'
p209
I140221827822096
sg11
S'trials'
p210
sg6
g7
sS'thisRepN'
p211
I1
sg19
I01
sg20
g21
sS'data'
p212
g1
(cpsychopy.data
DataHandler
p213
c__builtin__
dict
p214
(dp215
S'ran'
p216
cnumpy.ma.core
_mareconstruct
p217
(cnumpy.ma.core
MaskedArray
p218
cnumpy
ndarray
p219
(I0
tp220
S'b'
tRp221
(I1
(I2
I1
tg26
(S'f4'
I0
I1
tRp222
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00'
NtbsS'order'
p223
g217
(g218
g219
g220
S'b'
tRp224
(I1
(I2
I1
tg222
I00
S'\x00\x00\x00\x00\x00\x00\x80?'
S'\x00\x00'
NtbstRp225
(dp226
S'isNumeric'
p227
(dp228
g216
I01
sg223
I01
ssg210
g203
sS'dataTypes'
p229
(lp230
g216
ag223
asS'dataShape'
p231
(lp232
I2
aI1
asbsS'method'
p233
S'sequential'
p234
sS'sequenceIndices'
p235
cnumpy.core.multiarray
_reconstruct
p236
(g219
(I0
tS'b'
tRp237
(I1
(I2
I1
tg52
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
tbsS'finished'
p238
I01
sS'nReps'
p239
I1
sS'nRemaining'
p240
I-1
sS'trialList'
p241
(lp242
g1
(cpsychopy.data
TrialType
p243
g214
(dp244
g41
g60
sg42
g61
stRp245
ag1
(g243
g214
(dp246
g41
g117
sg42
g118
stRp247
asS'seed'
p248
NsS'thisIndex'
p249
g109
sS'thisN'
p250
I2
sS'thisTrialN'
p251
I0
sS'nTotal'
p252
I2
sS'_warnUseOfNext'
p253
I01
sbag1
(g202
g3
NtRp254
(dp255
g205
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p256
sg207
(lp257
sg209
I140221827822096
sg11
S'stimuli'
p258
sg6
g7
sg211
I1
sg19
I01
sg20
g21
sg212
g1
(g213
g214
(dp259
g216
g217
(g218
g219
g220
S'b'
tRp260
(I1
(I4
I1
tg222
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00'
Ntbsg223
g217
(g218
g219
g220
S'b'
tRp261
(I1
(I4
I1
tg222
I00
S'\x00\x00\x00@\x00\x00@@\x00\x00\x00\x00\x00\x00\x80?'
S'\x00\x00\x00\x00'
NtbstRp262
(dp263
g227
(dp264
g216
I01
sg223
I01
ssg210
g254
sg229
(lp265
g216
ag223
asg231
(lp266
I4
aI1
asbsg233
S'random'
p267
sg235
g236
(g219
(I0
tS'b'
tRp268
(I1
(I4
I1
tg52
I01
S'\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
tbsg238
I01
sg239
I1
sg240
I-1
sg241
(lp269
g1
(g243
g214
(dp270
g43
g88
sg44
g84
stRp271
ag1
(g243
g214
(dp272
g43
g100
sg44
g96
stRp273
ag1
(g243
g214
(dp274
g43
g64
sg44
g58
stRp275
ag1
(g243
g214
(dp276
g43
g76
sg44
g72
stRp277
asg248
Nsg249
g93
sg250
I4
sg251
I0
sg252
I4
sg253
I01
sbag1
(g202
g3
NtRp278
(dp279
g205
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p280
sg207
(lp281
sg209
I140221827822096
sg11
g258
sg6
g7
sg211
I1
sg19
I01
sg20
g21
sg212
g1
(g213
g214
(dp282
g216
g217
(g218
g219
g220
S'b'
tRp283
(I1
(I4
I1
tg222
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00'
Ntbsg223
g217
(g218
g219
g220
S'b'
tRp284
(I1
(I4
I1
tg222
I00
S'\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x80?\x00\x00@@'
S'\x00\x00\x00\x00'
NtbstRp285
(dp286
g227
(dp287
g216
I01
sg223
I01
ssg210
g278
sg229
(lp288
g216
ag223
asg231
(lp289
I4
aI1
asbsg233
g267
sg235
g236
(g219
(I0
tS'b'
tRp290
(I1
(I4
I1
tg52
I01
S'\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00'
tbsg238
I01
sg239
I1
sg240
I-1
sg241
(lp291
g1
(g243
g214
(dp292
g121
g146
sg114
g142
stRp293
ag1
(g243
g214
(dp294
g121
g122
sg114
g115
stRp295
ag1
(g243
g214
(dp296
g121
g134
sg114
g130
stRp297
ag1
(g243
g214
(dp298
g121
g158
sg114
g154
stRp299
asg248
Nsg249
g151
sg250
I4
sg251
I0
sg252
I4
sg253
I01
sbag1
(g202
g3
NtRp300
(dp301
g205
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p302
sg207
(lp303
sg209
I140221827822096
sg11
S'trials_2'
p304
sg6
g7
sg211
I1
sg19
I01
sg20
g21
sg212
g1
(g213
g214
(dp305
g216
g217
(g218
g219
g220
S'b'
tRp306
(I1
(I4
I1
tg222
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00'
Ntbsg223
g217
(g218
g219
g220
S'b'
tRp307
(I1
(I4
I1
tg222
I00
S'\x00\x00@@\x00\x00\x00@\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00'
NtbstRp308
(dp309
g227
(dp310
g216
I01
sg223
I01
ssg210
g300
sg229
(lp311
g216
ag223
asg231
(lp312
I4
aI1
asbsg233
g267
sg235
g236
(g219
(I0
tS'b'
tRp313
(I1
(I4
I1
tg52
I01
S'\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg238
I01
sg239
I1
sg240
I-1
sg241
(lp314
g1
(g243
g214
(dp315
g173
g198
sg169
g195
stRp316
ag1
(g243
g214
(dp317
g173
g190
sg169
g187
stRp318
ag1
(g243
g214
(dp319
g173
g182
sg169
g179
stRp320
ag1
(g243
g214
(dp321
g173
g174
sg169
g170
stRp322
asg248
Nsg249
g197
sg250
I4
sg251
I0
sg252
I4
sg253
I01
sbasS'savePickle'
p323
I01
sb.
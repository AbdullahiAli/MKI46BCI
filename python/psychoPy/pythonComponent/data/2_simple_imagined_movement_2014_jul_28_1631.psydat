ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
V/home/wieke/git/buffer_bci/psychoPy/pythonComponent/simple_imagined_movement.psyexp
p7
sS'dataFileName'
p8
Vdata/2_simple_imagined_movement_2014_jul_28_1631
p9
sS'runtimeInfo'
p10
NsS'name'
p11
Vsimple_imagined_movement
p12
sS'dataNames'
p13
(lp14
S'key_resp_2.keys'
p15
aS'key_resp_2.rt'
p16
aS'key_resp_3.keys'
p17
aS'key_resp_3.rt'
p18
asS'autoLog'
p19
I01
sS'extraInfo'
p20
(dp21
S'date'
p22
V2014_jul_28_1631
p23
sS'frameRate'
p24
cnumpy.core.multiarray
scalar
p25
(cnumpy
dtype
p26
(S'f8'
I0
I1
tRp27
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xeat\x9by\x13\xdcH@'
tRp28
sS'expName'
p29
g12
sS'session'
p30
V001
p31
sS'participant'
p32
V2
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p39
sS'thisTrial'
p40
g1
(cpsychopy.data
TrialType
p41
c__builtin__
dict
p42
(dp43
S'bodyPart'
p44
Vright_hand
p45
sS'instruction'
p46
V Right Hand
p47
stRp48
sS'_exp'
p49
I140470578811408
sg11
S'trials_2'
p50
sg6
g7
sS'thisRepN'
p51
I0
sg19
I01
sg20
g21
sS'data'
p52
g1
(cpsychopy.data
DataHandler
p53
g42
(dp54
S'ran'
p55
cnumpy.ma.core
_mareconstruct
p56
(cnumpy.ma.core
MaskedArray
p57
cnumpy
ndarray
p58
(I0
tp59
S'b'
tRp60
(I1
(I4
I1
tg26
(S'f4'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00'
NtbsS'order'
p62
g56
(g57
g58
g59
S'b'
tRp63
(I1
(I4
I1
tg61
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x01\x00\x01\x01'
NtbstRp64
(dp65
S'isNumeric'
p66
(dp67
g55
I01
sg62
I01
ssS'trials'
p68
g36
sS'dataTypes'
p69
(lp70
g55
ag62
asS'dataShape'
p71
(lp72
I4
aI1
asbsS'method'
p73
S'random'
p74
sS'sequenceIndices'
p75
cnumpy.core.multiarray
_reconstruct
p76
(g58
(I0
tS'b'
tRp77
(I1
(I4
I1
tg26
(S'i8'
I0
I1
tRp78
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00'
tbsS'finished'
p79
I00
sS'nReps'
p80
I1
sS'nRemaining'
p81
I3
sS'trialList'
p82
(lp83
g1
(g41
g42
(dp84
g44
Vleft_hand
p85
sg46
V Left Hand
p86
stRp87
ag48
ag1
(g41
g42
(dp88
g44
Vleft_foot
p89
sg46
V Left Foot
p90
stRp91
ag1
(g41
g42
(dp92
g44
Vright_foot
p93
sg46
V Right Foot
p94
stRp95
asS'seed'
p96
NsS'thisIndex'
p97
g25
(g78
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp98
sS'thisN'
p99
I0
sS'thisTrialN'
p100
I0
sS'nTotal'
p101
I4
sS'_warnUseOfNext'
p102
I01
sbasS'saveWideText'
p103
I01
sS'thisEntry'
p104
(dp105
sS'version'
p106
S''
sS'_paramNamesSoFar'
p107
(lp108
S'trailText'
p109
aS'trail'
p110
aS'bodyPart'
p111
aS'instruction'
p112
asS'entries'
p113
(lp114
(dp115
g30
g31
sg16
F0.41462612152099609
sg29
g12
sg32
V2
sg22
g23
sg24
g28
sg15
S'space'
p116
sa(dp117
S'stimuli.thisN'
p118
I0
sS'trials.thisIndex'
p119
g25
(g78
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp120
sS'stimuli.thisIndex'
p121
g25
(g78
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp122
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p123
I0
sS'trials.thisRepN'
p124
I0
sg112
V Left Hand
p125
sg24
g28
sS'trials.thisN'
p126
I0
sg109
V Trail 1
p127
sg110
g25
(g78
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp128
sg29
g12
sS'trials.thisTrialN'
p129
I0
sS'stimuli.thisTrialN'
p130
I0
sg22
g23
sg111
Vleft_hand
p131
sa(dp132
S'stimuli.thisN'
p133
I1
sS'trials.thisIndex'
p134
g120
sS'stimuli.thisIndex'
p135
g25
(g78
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp136
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p137
I0
sS'trials.thisRepN'
p138
I0
sg112
V Right Hand
p139
sg24
g28
sS'trials.thisN'
p140
I0
sg109
g127
sg110
g128
sg29
g12
sS'trials.thisTrialN'
p141
I0
sS'stimuli.thisTrialN'
p142
I1
sg22
g23
sg111
Vright_hand
p143
sa(dp144
S'stimuli.thisN'
p145
I2
sS'trials.thisIndex'
p146
g120
sS'stimuli.thisIndex'
p147
g25
(g78
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp148
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p149
I0
sS'trials.thisRepN'
p150
I0
sg112
V Left Foot
p151
sg24
g28
sS'trials.thisN'
p152
I0
sg109
g127
sg110
g128
sg29
g12
sS'trials.thisTrialN'
p153
I0
sS'stimuli.thisTrialN'
p154
I2
sg22
g23
sg111
Vleft_foot
p155
sa(dp156
S'stimuli.thisN'
p157
I3
sS'trials.thisIndex'
p158
g120
sS'stimuli.thisIndex'
p159
g25
(g78
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp160
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p161
I0
sS'trials.thisRepN'
p162
I0
sg112
V Right Foot
p163
sg24
g28
sS'trials.thisN'
p164
I0
sg109
g127
sg110
g128
sg29
g12
sS'trials.thisTrialN'
p165
I0
sS'stimuli.thisTrialN'
p166
I3
sg22
g23
sg111
Vright_foot
p167
sa(dp168
g30
g31
sS'trials.thisIndex'
p169
g120
sg32
V2
sS'trials.thisRepN'
p170
I0
sg24
g28
sS'trials.thisN'
p171
I0
sg109
g127
sg110
g128
sg29
g12
sS'trials.thisTrialN'
p172
I0
sg22
g23
sa(dp173
S'stimuli.thisN'
p174
I0
sS'trials.thisIndex'
p175
g25
(g78
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp176
sS'stimuli.thisIndex'
p177
g25
(g78
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp178
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p179
I0
sS'trials.thisRepN'
p180
I0
sS'instruction'
p181
V Right Hand
p182
sg24
g28
sS'trials.thisN'
p183
I1
sg109
V Trail 2
p184
sg110
g25
(g78
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp185
sg29
g12
sS'trials.thisTrialN'
p186
I1
sS'stimuli.thisTrialN'
p187
I0
sg22
g23
sS'bodyPart'
p188
Vright_hand
p189
sa(dp190
S'stimuli.thisN'
p191
I1
sS'trials.thisIndex'
p192
g176
sS'stimuli.thisIndex'
p193
g25
(g78
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp194
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p195
I0
sS'trials.thisRepN'
p196
I0
sg181
V Right Foot
p197
sg24
g28
sS'trials.thisN'
p198
I1
sg109
g184
sg110
g185
sg29
g12
sS'trials.thisTrialN'
p199
I1
sS'stimuli.thisTrialN'
p200
I1
sg22
g23
sg188
Vright_foot
p201
sa(dp202
S'stimuli.thisN'
p203
I2
sS'trials.thisIndex'
p204
g176
sS'stimuli.thisIndex'
p205
g25
(g78
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp206
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p207
I0
sS'trials.thisRepN'
p208
I0
sg181
V Left Foot
p209
sg24
g28
sS'trials.thisN'
p210
I1
sg109
g184
sg110
g185
sg29
g12
sS'trials.thisTrialN'
p211
I1
sS'stimuli.thisTrialN'
p212
I2
sg22
g23
sg188
Vleft_foot
p213
sa(dp214
S'stimuli.thisN'
p215
I3
sS'trials.thisIndex'
p216
g176
sS'stimuli.thisIndex'
p217
g25
(g78
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp218
sg32
V2
sg30
g31
sS'stimuli.thisRepN'
p219
I0
sS'trials.thisRepN'
p220
I0
sg181
V Left Hand
p221
sg24
g28
sS'trials.thisN'
p222
I1
sg109
g184
sg110
g185
sg29
g12
sS'trials.thisTrialN'
p223
I1
sS'stimuli.thisTrialN'
p224
I3
sg22
g23
sg188
Vleft_hand
p225
sa(dp226
g30
g31
sS'trials.thisIndex'
p227
g176
sg32
V2
sS'trials.thisRepN'
p228
I0
sg24
g28
sS'trials.thisN'
p229
I1
sg109
g184
sg110
g185
sg29
g12
sS'trials.thisTrialN'
p230
I1
sg22
g23
sa(dp231
g30
g31
sg29
g12
sg32
V2
sg22
g23
sg17
S'space'
p232
sg24
g28
sg18
F1.3611688613891602
sasS'loops'
p233
(lp234
g1
(g35
g3
NtRp235
(dp236
g38
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p237
sg40
(lp238
sg49
I140470578811408
sg11
g68
sg6
g7
sg51
I1
sg19
I01
sg20
g21
sg52
g1
(g53
g42
(dp239
g55
g56
(g57
g58
g59
S'b'
tRp240
(I1
(I2
I1
tg61
I00
S'\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00'
Ntbsg62
g56
(g57
g58
g59
S'b'
tRp241
(I1
(I2
I1
tg61
I00
S'\x00\x00\x00\x00\x00\x00\x80?'
S'\x00\x00'
NtbstRp242
(dp243
g66
(dp244
g55
I01
sg62
I01
ssg68
g235
sg69
(lp245
g55
ag62
asg71
(lp246
I2
aI1
asbsg73
S'sequential'
p247
sg75
g76
(g58
(I0
tS'b'
tRp248
(I1
(I2
I1
tg78
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
tbsg79
I01
sg80
I1
sg81
I-1
sg82
(lp249
g1
(g41
g42
(dp250
g109
g127
sg110
g128
stRp251
ag1
(g41
g42
(dp252
g109
g184
sg110
g185
stRp253
asg96
Nsg97
g176
sg99
I2
sg100
I0
sg101
I2
sg102
I01
sbag1
(g35
g3
NtRp254
(dp255
g38
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p256
sg40
(lp257
sg49
I140470578811408
sg11
S'stimuli'
p258
sg6
g7
sg51
I1
sg19
I01
sg20
g21
sg52
g1
(g53
g42
(dp259
g55
g56
(g57
g58
g59
S'b'
tRp260
(I1
(I4
I1
tg61
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00'
Ntbsg62
g56
(g57
g58
g59
S'b'
tRp261
(I1
(I4
I1
tg61
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@'
S'\x00\x00\x00\x00'
NtbstRp262
(dp263
g66
(dp264
g55
I01
sg62
I01
ssg68
g254
sg69
(lp265
g55
ag62
asg71
(lp266
I4
aI1
asbsg73
g74
sg75
g76
(g58
(I0
tS'b'
tRp267
(I1
(I4
I1
tg78
I01
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00'
tbsg79
I01
sg80
I1
sg81
I-1
sg82
(lp268
g1
(g41
g42
(dp269
g111
g131
sg112
g125
stRp270
ag1
(g41
g42
(dp271
g111
g143
sg112
g139
stRp272
ag1
(g41
g42
(dp273
g111
g155
sg112
g151
stRp274
ag1
(g41
g42
(dp275
g111
g167
sg112
g163
stRp276
asg96
Nsg97
g160
sg99
I4
sg100
I0
sg101
I4
sg102
I01
sbag1
(g35
g3
NtRp277
(dp278
g38
V<PsychoPy2experiment version="1.80.06" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[0,0,0]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1024, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{'participant':'', 'session':'001'}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="simple_imagined_movement" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="pause">\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Pause" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="feedback">\u000a      <TextComponent name="text_5">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_5" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="&quot;Feedback &quot; + $feedback" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="receiveEvent">\u000a        <Param name="Begin Experiment" val="feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="receiveEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="feedback = geteventvalue(&quot;feedbackStimulusResponse&quot; + str(feedbackCounter)) &#10;feedbackCounter = feedbackCounter + 1    " valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulus">\u000a      <StaticComponent name="ISI_2">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_2">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_2" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;stimulus&quot;, str(bodyPart))" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="feedbackInstructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot). After each trail the system's classification of the brain signals will be shown.&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_3">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_3" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trailStart">\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$trailText&#10;" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="2" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent">\u000a        <Param name="Begin Experiment" val="# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;trailStart&quot;, trail)" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="stimulusFeedback">\u000a      <StaticComponent name="ISI">\u000a        <Param name="code" val="" valType="code" updates="None"/>\u000a        <Param name="name" val="ISI" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="0.5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a      </StaticComponent>\u000a      <TextComponent name="imagination_instruction">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="imagination_instruction" valType="code" updates="None"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="stopVal" val="4" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="text" val="$instruction" valType="str" updates="set every repeat"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="sendEvent_3">\u000a        <Param name="Begin Experiment" val="# Add feedback Counter&#10;feedbackCounter = 0&#10;&#10;# buffer_bci Handling the requered imports&#10;import sys&#10;sys.path.append(&quot;/home/wieke/git/buffer_bci/dataAcq/buffer/python/&quot;)&#10;from FieldTrip import Client, Event&#10;from time import sleep&#10;&#10;# buffer_bci Connecting to the buffer.&#10;host = 'localhost'&#10;port = 1972&#10;ftc = Client()&#10;ftc.connect(host,port)&#10;&#10;# buffer_bci Waiting for a valid header&#10;&#10;header = ftc.getHeader()&#10;&#10;while (header is None):&#10;    print &quot;Waiting for valid header...&quot;&#10;    sleep(1)&#10;    header = ftc.getHeader()&#10;    &#10;# buffer_bci Defining a usefull helper functions&#10;&#10;def sendEvent(eventType, eventValue):&#10;    e = Event()&#10;    e.type = eventType&#10;    e.value = eventValue&#10;    ftc.putEvents(e)&#10;    &#10;def geteventvalue(event_type):&#10;    for event in ftc.getEvents():&#10;        if event.type == event_type:&#10;            return event.value&#10;&#10;    start, nEvents = ftc.poll()&#10;    stop = False&#10;    &#10;    while not stop:    &#10;        ftc.wait(-1,nEvents, 30*60*1000)&#10;        event = ftc.getEvents([nEvents])[0]&#10;        stop = event.type == event_type&#10;        &#10;    return event.value" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="sendEvent_3" valType="code" updates="None"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Begin Routine" val="sendEvent(&quot;feedbackStimulus&quot; + str(feedbackCounter), &quot;&quot;)&#10;feedbackCounter = feedbackCounter + 1" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="Instructions">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Simple Imagined Movement Experiment&#10;&#10;During the trails imagine yourself vigerously shaking the indicated body part (left hand, right hand, left foot or right foot).&#10;&#10;Press &lt;space&gt; to continue." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3600" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'y','n','left','right','space'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="last key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="Instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="trails.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'trailText': u' Trail 1', 'trail': 1}, {'trailText': u' Trail 2', 'trail': 2}, {'trailText': u' Trail 3', 'trail': 3}, {'trailText': u' Trail 4', 'trail': 4}, {'trailText': u' Trail 5', 'trail': 5}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trailStart"/>\u000a    <LoopInitiator loopType="TrialHandler" name="stimuli">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="stimuli" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left hand.'}, {'bodyPart': u'right_hand', 'instruction': u' Right hand.'}, {'bodyPart': u'left_foot', 'instruction': u' Left foot.'}, {'bodyPart': u'right_foot', 'instruction': u' Right foot.'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulus"/>\u000a    <LoopTerminator name="stimuli"/>\u000a    <Routine name="pause"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="feedbackInstructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials_2">\u000a      <Param name="conditionsFile" val="stimulus_conditions.csv" valType="str" updates="None"/>\u000a      <Param name="name" val="trials_2" valType="code" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="random" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{'bodyPart': u'left_hand', 'instruction': u' Left Hand'}, {'bodyPart': u'right_hand', 'instruction': u' Right Hand'}, {'bodyPart': u'left_foot', 'instruction': u' Left Foot'}, {'bodyPart': u'right_foot', 'instruction': u' Right Foot'}]" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="stimulusFeedback"/>\u000a    <Routine name="feedback"/>\u000a    <LoopTerminator name="trials_2"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p279
sg40
(lp280
sg49
I140470578811408
sg11
g258
sg6
g7
sg51
I1
sg19
I01
sg20
g21
sg52
g1
(g53
g42
(dp281
g55
g56
(g57
g58
g59
S'b'
tRp282
(I1
(I4
I1
tg61
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00'
Ntbsg62
g56
(g57
g58
g59
S'b'
tRp283
(I1
(I4
I1
tg61
I00
S'\x00\x00@@\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80?'
S'\x00\x00\x00\x00'
NtbstRp284
(dp285
g66
(dp286
g55
I01
sg62
I01
ssg68
g277
sg69
(lp287
g55
ag62
asg71
(lp288
I4
aI1
asbsg73
g74
sg75
g76
(g58
(I0
tS'b'
tRp289
(I1
(I4
I1
tg78
I01
S'\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg79
I01
sg80
I1
sg81
I-1
sg82
(lp290
g1
(g41
g42
(dp291
g188
g225
sg181
g221
stRp292
ag1
(g41
g42
(dp293
g188
g189
sg181
g182
stRp294
ag1
(g41
g42
(dp295
g188
g213
sg181
g209
stRp296
ag1
(g41
g42
(dp297
g188
g201
sg181
g197
stRp298
asg96
Nsg97
g218
sg99
I4
sg100
I0
sg101
I4
sg102
I01
sbag36
asS'savePickle'
p299
I01
sb.